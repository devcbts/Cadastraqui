// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  ADMIN
  CANDIDATE
  RESPONSIBLE
  ENTITY
  ASSISTANT
}

enum COUNTRY {
  AC
  AL
  AM
  AP
  BA
  CE
  DF
  ES
  GO
  MA
  MG
  MS
  MT
  PA
  PB
  PE
  PI
  PR
  RJ
  RN
  RO
  RR
  RS
  SC
  SE
  SP
  TO
}

// Enuns for the Candidate Register and Family Member Tables
enum GENDER {
  MALE
  FEMALE
}

enum DOCUMENT_TYPE {
  DriversLicense
  FunctionalCard
  MilitaryID
  ForeignerRegistration
  Passport
  WorkCard
}

enum MARITAL_STATUS {
  Single
  Married
  Separated
  Divorced
  Widowed
  StableUnion
}

enum SkinColor {
  Yellow
  White
  Indigenous
  Brown
  Black
  NotDeclared
}

enum RELIGION {
  Catholic
  Evangelical
  Spiritist
  Atheist
  Other
  NotDeclared
}

enum SCHOLARSHIP {
  Illiterate
  ElementarySchool
  HighSchool
  CollegeGraduate
  CollegeUndergraduate
  Postgraduate
  Masters
  Doctorate
  PostDoctorate
}

enum EDUCATION_TYPE {
  Alfabetizacao
  Ensino_Medio
  Ensino_Tecnico
  Ensino_Superior
}

enum SHIFT {
  Matutino
  Vespertino
  Noturno
  Integral
}

enum INSTITUTION_TYPE {
  Public
  Private
}

enum IncomeSource {
  PrivateEmployee
  PublicEmployee
  DomesticEmployee
  TemporaryRuralEmployee
  BusinessOwnerSimplifiedTax
  BusinessOwner
  IndividualEntrepreneur
  SelfEmployed
  Retired
  Pensioner
  Apprentice
  Volunteer
  RentalIncome
  Student
  InformalWorker
  Unemployed
  TemporaryDisabilityBenefit
  LiberalProfessional
  FinancialHelpFromOthers
  Alimony
  PrivatePension
}

enum Relationship {
  Wife
  Husband
  Father
  Mother
  Stepfather
  Stepmother
  Sibling
  Grandparent
  Child
  Other
}

enum VehicleType {
  SmallCarsAndUtilities
  TrucksAndMinibuses
  Motorcycles
}

enum VehicleSituation {
  PaidOff
  Financed
}

enum VehicleUsage {
  WorkInstrument
  NecessaryDisplacement
}

// housing enuns (for the housing table )
enum PropertyStatus {
  OwnPaidOff
  OwnFinanced
  Rented
  ProvidedByEmployer
  ProvidedByFamily
  ProvidedOtherWay
  Irregular
}

enum ContractType {
  Verbal
  ThroughRealEstateAgency
  DirectWithOwner
}

enum TimeLivingInProperty {
  UpTo11Months
  From1To10Years
  From10To20Years
  Over20Years
}

enum DomicileType {
  House
  CondominiumHouse
  Apartment
  RoomingHouse
}

enum NumberOfRooms {
  One
  Two
  Three
  Four
  Five
  Six
  Seven
  Eight
  Nine
  Ten
  Eleven
  Twelve
}

enum Disease {
  ALIENATION_MENTAL
  CARDIOPATHY_SEVERE
  BLINDNESS
  RADIATION_CONTAMINATION
  PARKINSONS_DISEASE
  ANKYLOSING_SPONDYLITIS
  PAGETS_DISEASE
  HANSENS_DISEASE
  SEVERE_HEPATOPATHY
  SEVERE_NEPHROPATHY
  PARALYSIS
  ACTIVE_TUBERCULOSIS
  HIV_AIDS
  MALIGNANT_NEOPLASM
  TERMINAL_STAGE
  MICROCEPHALY
  AUTISM_SPECTRUM_DISORDER
  RARE_DISEASE
  OTHER_HIGH_COST_DISEASE
}

model Candidate {
  id            String   @id() @default(uuid())
  name          String
  CPF           String   @unique
  birthDate     DateTime
  phone         String
  address       String
  city          String
  UF            COUNTRY
  CEP           String
  neighborhood  String
  addressNumber Int
  role          ROLE     @default(CANDIDATE)
  createdAt     DateTime @default(now())

  user    User?   @relation(fields: [user_id], references: [id])
  user_id String? @unique

  responsible    LegalResponsible? @relation(fields: [responsible_id], references: [id])
  responsible_id String?

  CandidateRegisterDetails CandidateRegisterDetails[]

  FamillyMember FamilyMember[]
  Housing       Housing[]

  @@map("candidates")
}

model User {
  id       String @id @default(uuid())
  email    String @unique
  password String
  role     ROLE   @default(CANDIDATE)

  createdAt        DateTime           @default(now())
  Candidate        Candidate[]
  LegalResponsible LegalResponsible[]
  Entity           Entity[]
  SocialAssistant  SocialAssistant[]

  @@map("users")
}

model LegalResponsible {
  id                              String            @id() @default(uuid())
  name                            String
  CPF                             String            @unique
  birthDate                       DateTime
  phone                           String
  address                         String
  city                            String
  UF                              COUNTRY
  CEP                             String
  neighborhood                    String
  addressNumber                   Int
  livesAtSameAddress              Boolean?
  institutionType                 INSTITUTION_TYPE?
  responsibleEducationLevel       EDUCATION_TYPE?
  responsibleGradeOrSemester      String?
  responsibleShift                SHIFT?
  ResponsibleEducationInstitution String?
  role                            ROLE              @default(RESPONSIBLE)
  createdAt                       DateTime          @default(now())

  user      User        @relation(fields: [user_id], references: [id])
  user_id   String      @unique
  Candidate Candidate[]

  @@map("responsibles")
}

model SocialAssistant {
  id   String @id @default(uuid())
  name String
  CPF  String @unique

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  entity_matrix    EntityMatrix? @relation(fields: [entity_matrix_id], references: [id])
  entity_matrix_id String?

  entity_subsidiary    EntitySubsidiary? @relation(fields: [entity_subsidiary_id], references: [id])
  entity_subsidiary_id String?

  @@map("assistants")
}

model Entity {
  id           String  @id @default(uuid())
  name         String?
  socialReason String
  CNPJ         String
  logo         String

  user         User           @relation(fields: [user_id], references: [id])
  user_id      String
  EntityMatrix EntityMatrix[]

  @@map("entities")
}

model EntityMatrix {
  id                         String  @id @default(uuid())
  CEP                        String
  publicPlace                String
  city                       String
  addressNumber              String
  neighborhood               String
  UF                         COUNTRY
  addressComplement          String?
  educationalArea            Boolean
  educationalInstitutionCode String? // Caso o campo de educationalArea seja true

  entity    Entity @relation(fields: [entity_id], references: [id])
  entity_id String @unique

  EntitySubsidiary            EntitySubsidiary[]
  EntityDirector              EntityDirector[]
  SelectionProcessResponsible SelectionProcessResponsible[]
  SocialAssistant             SocialAssistant[]
  Announcement                Announcement[]
}

model EntitySubsidiary {
  id                String  @id @default(uuid())
  CNPJ              String
  name              String
  code              String
  CEP               String
  addressStreet     String
  addressNumber     String
  addressComplement String?
  city              String
  neighborhood      String
  UF                COUNTRY

  entityMatrix                EntityMatrix                  @relation(fields: [entity_matrix_id], references: [id])
  entity_matrix_id            String                        @unique
  EntityDirector              EntityDirector[]
  SelectionProcessResponsible SelectionProcessResponsible[]
  SocialAssistant             SocialAssistant[]
  Announcement                Announcement[]
}

model EntityDirector {
  id    String @id @default(uuid())
  name  String
  CPF   String @unique
  email String
  phone String

  entity_matrix    EntityMatrix? @relation(fields: [entity_matrix_id], references: [id])
  entity_matrix_id String?

  entity_subsidiary    EntitySubsidiary? @relation(fields: [entity_subsidiary_id], references: [id])
  entity_subsidiary_id String?
}

model SelectionProcessResponsible {
  id    String @id @default(uuid())
  name  String
  CPF   String @unique
  email String
  phone String

  entity_matrix    EntityMatrix? @relation(fields: [entity_matrix_id], references: [id])
  entity_matrix_id String?

  entity_subsidiary    EntitySubsidiary? @relation(fields: [entity_subsidiary_id], references: [id])
  entity_subsidiary_id String?
}

model CandidateRegisterDetails {
  id                               String         @id @default(uuid())
  age                              Int
  gender                           GENDER
  nationality                      String
  RG                               String         @unique
  rgIssuingAuthority               String
  rgIssuingState                   String
  documentType                     DOCUMENT_TYPE?
  documentNumber                   String?
  documentValidity                 DateTime?
  maritalStatus                    MARITAL_STATUS
  skinColor                        SkinColor
  religion                         RELIGION
  educationLevel                   SCHOLARSHIP
  specialNeeds                     Boolean?
  specialNeedsDescription          String?
  hasMedicalReport                 Boolean?
  landlinePhone                    String?
  workPhone                        String?
  contactNameForMessage            String?
  profession                       String
  enrolledGovernmentProgram        Boolean?
  NIS                              String?
  incomeSource                     IncomeSource[]
  livesAlone                       Boolean
  intendsToGetScholarship          Boolean
  attendedPublicHighSchool         Boolean?
  benefitedFromCebasScholarship    Boolean?
  secondaryOrProfessionalEducation Boolean?
  gradeOrSemester                  String?
  hasScholarship                   Boolean?
  scholarshipPercentage            Int?
  numberOfMinorCandidates          Int?
  educationInstitution             String?
  CNPJeducationInstitution         String?
  professionalCourseName           String?

  candidate    Candidate @relation(fields: [candidate_id], references: [id])
  candidate_id String

  @@map("registerDetails")
}

model FamilyMember {
  id                        String         @id @default(uuid())
  relationship              Relationship
  otherRelationship         String?
  fullName                  String
  birthDate                 DateTime
  age                       Int?
  gender                    GENDER
  mobilePhone               String
  nationality               String
  country                   String?
  city                      String?
  CPF                       String?        @unique
  RG                        String?
  rgIssuingAuthority        String?
  rgIssuingState            String?
  documentType              DOCUMENT_TYPE?
  documentNumber            String?
  documentValidity          DateTime?
  birthRegistrationNumber   String?
  birthRegistrationBook     String?
  birthRegistrationPage     String?
  maritalStatus             MARITAL_STATUS
  skinColor                 SkinColor
  religion                  RELIGION
  educationLevel            EDUCATION_TYPE
  specialNeeds              Boolean?
  specialNeedsDescription   String?
  hasMedicalReport          Boolean?
  landlinePhone             String?
  workPhone                 String?
  contactNameForMessage     String?
  profession                String
  enrolledGovernmentProgram Boolean?
  nis                       String?
  incomeSource              IncomeSource[]
  expenses                  Expense[]

  candidate           Candidate             @relation(fields: [candidate_id], references: [id])
  candidate_id        String
  Loan                Loan[]
  Financing           Financing[]
  CreditCard          CreditCard[]
  OtherExpense        OtherExpense[]
  FamilyMemberDisease FamilyMemberDisease[]
  FamilyMemberIncome  FamilyMemberIncome[]
  Vehicle             Vehicle[]

  @@map("familyMembers")
}

model Housing {
  id                   String               @id @default(uuid())
  propertyStatus       PropertyStatus
  contractType         ContractType
  grantorName          String
  timeLivingInProperty TimeLivingInProperty
  domicileType         DomicileType
  numberOfRooms        NumberOfRooms
  numberOfBedrooms     Int

  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId String

  @@map("housing")
}

model Vehicle {
  id                String           @id @default(uuid())
  hasVehicle        Boolean          @default(false)
  quantity          Int?             @default(1)
  owner             FamilyMember     @relation(fields: [ownerId], references: [id])
  ownerId           String
  vehicleType       VehicleType
  modelAndBrand     String?
  manufacturingYear Int?
  situation         VehicleSituation
  hasInsurance      Boolean          @default(false)
  insuranceValue    Float? // Only if hasInsurance is true
  usage             VehicleUsage
}

model FamilyMemberIncome {
  id                   String          @id @default(uuid())
  name                 String
  occupation           String
  hiringDate           DateTime
  position             String
  payerDetails         String
  employerOrGovernment String
  employerPhone        String
  receivesOvertime     Boolean
  salaries             Salary[]
  monthlyIncomes       MonthlyIncome[]

  familyMember   FamilyMember @relation(fields: [familyMemberId], references: [id])
  familyMemberId String
}

model Salary {
  id                   String             @id @default(uuid())
  familyMemberIncomeId String
  value                Decimal?
  index                Int
  familyMemberIncome   FamilyMemberIncome @relation(fields: [familyMemberIncomeId], references: [id])
}

model MonthlyIncome {
  id                        String             @id @default(uuid())
  familyMemberIncomeId      String
  month                     String
  year                      String
  grossAmount               Decimal
  hadDeduction              Boolean
  deductionValue            Decimal?
  publicPension             Decimal?
  incomeTax                 Decimal?
  otherDeductions           Decimal?
  foodAllowance             Boolean
  foodAllowanceValue        Decimal?
  transportAllowance        Boolean
  transportAllowanceValue   Decimal?
  expenseReimbursement      Boolean
  expenseReimbursementValue Decimal?
  advancePayment            Boolean
  advancePaymentValue       Decimal?
  reversals                 Boolean
  reversalValue             Decimal?
  compensation              Boolean
  compensationValue         Decimal?
  judicialPension           Boolean
  judicialPensionValue      Decimal?
  familyMemberIncome        FamilyMemberIncome @relation(fields: [familyMemberIncomeId], references: [id])
}

model Expense {
  id                  String       @id @default(uuid())
  month               String
  waterSewage         Float?
  electricity         Float?
  landlinePhone       Float?
  mobilePhone         Float?
  food                Float?
  rent                Float?
  garageRent          Float?
  condominium         Float?
  cableTV             Float?
  streamingServices   Float?
  fuel                Float?
  annualIPVA          Float?
  optedForInstallment Boolean?
  installmentCount    Int?
  installmentValue    Float?
  annualIPTU          Float?
  annualITR           Float?
  annualIR            Float?
  INSS                Float?
  publicTransport     Float?
  schoolTransport     Float?
  internet            Float?
  courses             Float?
  healthPlan          Float?
  dentalPlan          Float?
  medicationExpenses  Float?
  otherExpenses       Float?
  totalExpense        Float?
  familyMember        FamilyMember @relation(fields: [familyMember_id], references: [id])
  familyMember_id     String
}

model Loan {
  id                String @id @default(uuid())
  familyMemberName  String
  installmentValue  Float
  totalInstallments Int
  paidInstallments  Int
  bankName          String

  familyMember    FamilyMember @relation(fields: [familyMember_id], references: [id])
  familyMember_id String
}

model Financing {
  id                String @id @default(uuid())
  familyMemberName  String
  financingType     String
  installmentValue  Float
  totalInstallments Int
  paidInstallments  Int
  bankName          String

  familyMember    FamilyMember @relation(fields: [familyMember_id], references: [id])
  familyMember_id String
}

model CreditCard {
  id               String       @id @default(uuid())
  familyMemberName String
  usersCount       Int
  cardType         String
  bankName         String
  cardFlag         String
  invoiceValue     Float
  familyMember     FamilyMember @relation(fields: [familyMember_id], references: [id])
  familyMember_id  String
}

model OtherExpense {
  id              String       @id @default(uuid())
  description     String
  value           Float
  familyMember    FamilyMember @relation(fields: [familyMember_id], references: [id])
  familyMember_id String
}

model FamilyMemberDisease {
  id               String       @id @default(uuid())
  familyMember     FamilyMember @relation(fields: [familyMember_id], references: [id])
  familyMember_id  String
  disease          Disease
  specificDisease  String?
  hasMedicalReport Boolean
  medication       Medication[]

  @@map("familyMemberDiseases")
}

model Medication {
  id                         String              @id @default(uuid())
  familyMemberDisease        FamilyMemberDisease @relation(fields: [familyMemberDisease_id], references: [id])
  familyMemberDisease_id     String
  medicationName             String
  obtainedPublicly           Boolean
  specificMedicationPublicly String?

  @@map("medications")
}

//Tabelas para o edital
model Announcement {
  id                   String           @id @default(uuid())
  entityChanged        Boolean? // Did the entity's responsible change?
  branchChanged        Boolean? // Was there an opening or closing of a branch?
  announcementType     AnnouncementType
  announcementNumber   Int
  announcementDate     DateTime
  offeredVacancies     Int? // Only if announcementType is ScholarshipGrant
  verifiedScholarships Int? // Only if announcementType is ScholarshipGrant
  timelines            Timeline[]
  educationLevels      EducationLevel[]

  entity_matrix    EntityMatrix? @relation(fields: [entity_matrix_id], references: [id])
  entity_matrix_id String?

  entity_subsidiary    EntitySubsidiary? @relation(fields: [entity_subsidiary_id], references: [id])
  entity_subsidiary_id String?
}

model Timeline {
  id             String       @id @default(uuid())
  controlLine    Int // Control line
  stage          String // Schedule/phase
  deadline       DateTime // Deadlines
  announcement   Announcement @relation(fields: [announcementId], references: [id])
  announcementId String
}

model EducationLevel {
  id                       String                          @id @default(uuid())
  level                    LevelType
  basicEduType             BasicEducationType?
  scholarshipType          ScholarshipOfferType?
  higherEduScholarshipType HigherEducationScholarshipType?
  offeredCourseType        OfferedCourseType?
  availableCourses         String? // Available Courses
  announcement             Announcement                    @relation(fields: [announcementId], references: [id])
  announcementId           String
}

enum AnnouncementType {
  ScholarshipGrant
  PeriodicVerification
}

enum LevelType {
  BasicEducation
  HigherEducation
}

enum BasicEducationType {
  Preschool
  Elementary
  HighSchool
  ProfessionalEducation
}

enum ScholarshipOfferType {
  Law187Scholarship
  StudentWithDisability
  FullTime
  EntityWorkers
}

enum HigherEducationScholarshipType {
  PROUNIFull
  PROUNIPartial
  StateGovernment
  CityGovernment
  ExternalEntities
  HigherEduInstitutionFull
  HigherEduInstitutionPartial
  HigherEduInstitutionWorkers
  PostgraduateStrictoSensu
}

enum OfferedCourseType {
  UndergraduateBachelor
  UndergraduateLicense
  UndergraduateTechnologist
}
