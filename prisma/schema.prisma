generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TiebreakerCriterias {
  CadUnico
  LeastFamilyIncome
  SeriousIllness
  Distance
  Draw
}

model Candidate {
  id                     String                @id @default(uuid())
  name                   String
  CPF                    String                @unique
  birthDate              DateTime
  // phone                  String
  // address                String
  // city                   String
  // UF                     COUNTRY
  // CEP                    String
  // neighborhood           String
  // addressNumber          String
  // complement             String?
  role                   ROLE                  @default(CANDIDATE)
  createdAt              DateTime              @default(now())
  user_id                String?               @unique
  responsible_id         String?
  profilePicture         String?
  email                  String?
  finishedapplication    Boolean               @default(false)
  Application            Application[]
  CreditCard             CreditCard[]
  Expense                Expense[]
  Financing              Financing[]
  IdentityDetails        IdentityDetails?
  FamilyMemberIncome     FamilyMemberIncome[]
  Loan                   Loan[]
  OtherExpense           OtherExpense[]
  Vehicle                Vehicle[]
  responsible            LegalResponsible?     @relation(fields: [responsible_id], references: [id])
  user                   User?                 @relation(fields: [user_id], references: [id])
  FamillyMember          FamilyMember[]
  Housing                Housing?
  MonthlyIncome          MonthlyIncome[]
  FamilyMemberDisease    FamilyMemberDisease[]
  Medication             Medication[]
  BankAccount            BankAccount[]
  Declarations           Declarations[]
  AnnouncementsSeen      AnnouncementsSeen[]
  FinishedRegistration   FinishedRegistration?
  finishedRegistrationId String?

  @@unique([id, responsible_id])
  @@map("candidates")
}

model User {
  id               String            @id @default(uuid())
  email            String            @unique
  password         String
  role             ROLE              @default(CANDIDATE)
  createdAt        DateTime          @default(now())
  profilePicture   String?
  EntityDirector   EntityDirector?
  EntitySubsidiary EntitySubsidiary?
  SocialAssistant  SocialAssistant?
  Candidate        Candidate?
  Entity           Entity?
  LegalResponsible LegalResponsible?

  @@map("users")
}

model LegalResponsible {
  id                              String                @id @default(uuid())
  name                            String
  CPF                             String                @unique
  birthDate                       DateTime
  // phone                           String
  // address                         String
  // city                            String
  // UF                              COUNTRY
  // CEP                             String
  // neighborhood                    String
  // addressNumber                   String
  // complement                      String?
  livesAtSameAddress              Boolean?
  institutionType                 INSTITUTION_TYPE?
  responsibleEducationLevel       EDUCATION_TYPE?
  responsibleGradeOrSemester      String?
  responsibleShift                SHIFT?
  ResponsibleEducationInstitution String?
  role                            ROLE                  @default(RESPONSIBLE)
  createdAt                       DateTime              @default(now())
  user_id                         String                @unique
  hasScholarship                  Boolean?
  monthlyAmount                   String?
  percentageOfScholarship         String?
  IdentityDetails                 IdentityDetails?
  Candidate                       Candidate[]
  Housing                         Housing?
  FamillyMember                   FamilyMember[]
  CreditCard                      CreditCard[]
  Expense                         Expense[]
  Financing                       Financing[]
  Loan                            Loan[]
  OtherExpense                    OtherExpense[]
  Vehicle                         Vehicle[]
  user                            User                  @relation(fields: [user_id], references: [id])
  FamilyMemberDisease             FamilyMemberDisease[]
  Medication                      Medication[]
  Application                     Application[]
  FamilyMemberIncome              FamilyMemberIncome[]
  MonthlyIncome                   MonthlyIncome[]
  BankAccount                     BankAccount[]
  Declarations                    Declarations[]
  AnnouncementsSeen               AnnouncementsSeen[]
  FinishedRegistration            FinishedRegistration?
  finishedRegistrationId          String?

  @@unique([id, user_id])
  @@map("responsibles")
}

model SocialAssistant {
  id                String              @id @default(uuid())
  name              String
  CPF               String              @unique
  RG                String              @unique
  CRESS             String              @unique
  phone             String
  user_id           String              @unique
  entity_id         String
  Application       Application[]
  entity            Entity              @relation(fields: [entity_id], references: [id])
  user              User                @relation(fields: [user_id], references: [id])
  Announcement      Announcement[]      @relation("AnnouncementToSocialAssistant")
  entity_subsidiary EntitySubsidiary[]  @relation("EntitySubsidiaryToSocialAssistant")
  InterviewSchedule InterviewSchedule[]
  AssistantSchedule AssistantSchedule[]

  @@map("assistants")
}

model Entity {
  id                         String             @id @default(uuid())
  name                       String?
  phone                      String?
  socialReason               String
  logo                       String?
  CNPJ                       String             @unique
  CEP                        String
  address                    String             @default("")
  addressNumber              Int?
  neighborhood               String             @default("")
  UF                         COUNTRY?
  city                       String             @default("")
  educationalInstitutionCode String?
  user_id                    String             @unique
  Announcement               Announcement[]
  EntityDirector             EntityDirector[]
  EntitySubsidiary           EntitySubsidiary[]
  SocialAssistant            SocialAssistant[]
  user                       User               @relation(fields: [user_id], references: [id])

  @@map("entities")
}

model EntitySubsidiary {
  id                         String            @id @default(uuid())
  CNPJ                       String            @unique
  name                       String
  socialReason               String
  CEP                        String
  address                    String
  phone                      String?
  addressNumber              Int?
  city                       String?           @default("")
  neighborhood               String?           @default("")
  UF                         COUNTRY?
  educationalInstitutionCode String?
  entity_id                  String
  user_id                    String            @unique
  Announcement               Announcement[]
  EntityDirector             EntityDirector[]
  entity                     Entity            @relation(fields: [entity_id], references: [id])
  user                       User              @relation(fields: [user_id], references: [id])
  SocialAssistant            SocialAssistant[] @relation("EntitySubsidiaryToSocialAssistant")
  EducationLevel             EducationLevel[]
}

model EntityDirector {
  id                   String            @id @default(uuid())
  name                 String
  CPF                  String            @unique
  phone                String
  user_id              String            @unique
  entity_subsidiary_id String?
  entity_id            String?
  entity               Entity?           @relation(fields: [entity_id], references: [id])
  entity_subsidiary    EntitySubsidiary? @relation(fields: [entity_subsidiary_id], references: [id])
  user                 User              @relation(fields: [user_id], references: [id])
}

model IdentityDetails {
  id                               String         @id @default(uuid())
  fullName                         String
  socialName                       String?
  birthDate                        DateTime
  gender                           GENDER
  nationality                      String
  natural_city                     String
  natural_UF                       COUNTRY
  CPF                              String?        @unique
  RG                               String         @unique
  rgIssuingAuthority               String
  rgIssuingState                   String
  documentType                     DOCUMENT_TYPE?
  CadUnico                         Boolean        @default(false)
  hasSevereDeseaseOrUsesMedication Boolean?
  hasBankAccount                   Boolean?

  documentNumber                             String?
  documentValidity                           DateTime?
  maritalStatus                              MARITAL_STATUS
  skinColor                                  SkinColor
  religion                                   RELIGION
  educationLevel                             SCHOLARSHIP
  specialNeeds                               Boolean?
  address                                    String?
  addressNumber                              String?
  complement                                 String?
  neighborhood                               String?
  city                                       String?
  UF                                         COUNTRY?
  CEP                                        String?
  specialNeedsDescription                    String?
  specialNeedsType                           String?
  hasMedicalReport                           Boolean?
  email                                      String?
  landlinePhone                              String?
  workPhone                                  String?
  contactNameForMessage                      String?
  profession                                 String
  enrolledGovernmentProgram                  String?
  NIS                                        String?
  incomeSource                               IncomeSource[]
  livesAlone                                 Boolean
  intendsToGetScholarship                    Boolean
  attendedPublicHighSchool                   Boolean?
  benefitedFromCebasScholarship_basic        Boolean?
  yearsBenefitedFromCebas_basic              String[]
  scholarshipType_basic                      ScholarshipType?
  institutionName_basic                      String?
  institutionCNPJ_basic                      String?
  benefitedFromCebasScholarship_professional Boolean?
  lastYearBenefitedFromCebas_professional    String?
  scholarshipType_professional               ScholarshipType?
  institutionName_professional               String?
  institutionCNPJ_professional               String?
  nameOfScholarshipCourse_professional       String?
  candidate_id                               String?           @unique
  responsible_id                             String?           @unique
  candidate                                  Candidate?        @relation(fields: [candidate_id], references: [id])
  responsible                                LegalResponsible? @relation(fields: [responsible_id], references: [id])
}

model FamilyMember {
  id                                         String                  @id @default(uuid())
  relationship                               Relationship
  otherRelationship                          String?
  fullName                                   String
  socialName                                 String?
  birthDate                                  DateTime
  gender                                     GENDER
  nationality                                String
  natural_city                               String
  natural_UF                                 COUNTRY
  CPF                                        String
  RG                                         String
  rgIssuingAuthority                         String
  rgIssuingState                             String
  documentType                               DOCUMENT_TYPE?
  documentNumber                             String?
  documentValidity                           DateTime?
  numberOfBirthRegister                      String?
  bookOfBirthRegister                        String?
  pageOfBirthRegister                        String?
  maritalStatus                              MARITAL_STATUS
  skinColor                                  SkinColor
  religion                                   RELIGION
  educationLevel                             SCHOLARSHIP
  specialNeeds                               Boolean?
  specialNeedsDescription                    String?
  specialNeedsType                           String?
  hasMedicalReport                           Boolean?
  landlinePhone                              String?
  workPhone                                  String?
  contactNameForMessage                      String?
  email                                      String?
  profession                                 String
  enrolledGovernmentProgram                  String?
  NIS                                        String?
  educationPlace                             INSTITUTION_TYPE?
  institutionName                            String?
  coursingEducationLevel                     EDUCATION_TYPE?
  cycleOfEducation                           String?
  turnOfEducation                            SHIFT?
  hasScholarship                             Boolean?
  percentageOfScholarship                    String?
  monthlyAmount                              String?
  candidate_id                               String?
  attendedPublicHighSchool                   Boolean?
  benefitedFromCebasScholarship_basic        Boolean?
  benefitedFromCebasScholarship_professional Boolean?
  CadUnico                                   Boolean?
  incomeSource                               IncomeSource[]
  CreditCard                                 CreditCard[]
  FamilyMemberIncome                         FamilyMemberIncome[]
  Financing                                  Financing[]
  Loan                                       Loan[]
  MonthlyIncome                              MonthlyIncome[]
  OtherExpense                               OtherExpense[]
  FamilyMemberToVehicle                      FamilyMemberToVehicle[]
  FamilyMemberDisease                        FamilyMemberDisease[]
  candidate                                  Candidate?              @relation(fields: [candidate_id], references: [id])
  Medication                                 Medication[]
  LegalResponsible                           LegalResponsible?       @relation(fields: [legalResponsibleId], references: [id])
  legalResponsibleId                         String?
  BankAccount                                BankAccount[]
  Declarations                               Declarations[]
  hasSevereDeseaseOrUsesMedication           Boolean?
  hasBankAccount                             Boolean?

  @@map("familyMembers")
}

model Housing {
  id                   String               @id @default(uuid())
  propertyStatus       PropertyStatus
  contractType         ContractType?
  grantorName          String?
  timeLivingInProperty TimeLivingInProperty
  domicileType         DomicileType
  numberOfRooms        NumberOfRooms
  numberOfBedrooms     Int
  candidate_id         String?              @unique
  responsible_id       String?              @unique
  candidate            Candidate?           @relation(fields: [candidate_id], references: [id])
  responsible          LegalResponsible?    @relation(fields: [responsible_id], references: [id])

  @@map("housing")
}

model Vehicle {
  id                    String                  @id @default(uuid())
  vehicleType           VehicleType
  modelAndBrand         String
  manufacturingYear     Int
  situation             VehicleSituation
  financedMonths        Int?
  monthsToPayOff        Int?
  hasInsurance          Boolean                 @default(false)
  insuranceValue        Float?
  usage                 VehicleUsage
  owners_id             String[]
  candidate_id          String?
  candidate             Candidate?              @relation(fields: [candidate_id], references: [id])
  FamilyMemberToVehicle FamilyMemberToVehicle[]
  LegalResponsible      LegalResponsible?       @relation(fields: [legalResponsibleId], references: [id])
  legalResponsibleId    String?
}

model FamilyMemberIncome {
  id                    String            @id @default(uuid())
  employmentType        EmploymentType
  isUpdated             Boolean?          @default(true)
  averageIncome         String
  admissionDate         DateTime?
  position              String?
  payingSource          String?
  payingSourcePhone     String?
  startDate             DateTime?
  CNPJ                  String?
  financialAssistantCPF String?
  socialReason          String?
  fantasyName           String?
  CPNJ                  String?
  receivesUnemployment  Boolean?
  parcels               Int?
  firstParcelDate       DateTime?
  parcelValue           Float?
  familyMember_id       String?
  quantity              Int               @default(3)
  familyMember          FamilyMember?     @relation(fields: [familyMember_id], references: [id], onDelete: Cascade)
  candidate             Candidate?        @relation(fields: [candidate_id], references: [id], onDelete: Cascade)
  candidate_id          String?
  LegalResponsible      LegalResponsible? @relation(fields: [legalResponsibleId], references: [id])
  legalResponsibleId    String?
}

model MonthlyIncome {
  id                        String            @id @default(uuid())
  receivedIncome            Boolean?          @default(true)
  date                      DateTime?         @default(now())
  grossAmount               Float?
  liquidAmount              Float?
  proLabore                 Float?
  dividends                 Float?
  total                     Float?
  deductionValue            Decimal?
  publicPension             Decimal?
  incomeTax                 Decimal?
  otherDeductions           Decimal?
  foodAllowanceValue        Decimal?
  transportAllowanceValue   Decimal?
  expenseReimbursementValue Decimal?
  advancePaymentValue       Decimal?
  reversalValue             Decimal?
  compensationValue         Decimal?
  judicialPensionValue      Decimal?
  familyMember_id           String?
  familyMember              FamilyMember?     @relation(fields: [familyMember_id], references: [id], onDelete: Cascade)
  candidate                 Candidate?        @relation(fields: [candidate_id], references: [id], onDelete: Cascade)
  candidate_id              String?
  incomeSource              IncomeSource
  LegalResponsible          LegalResponsible? @relation(fields: [legalResponsibleId], references: [id])
  legalResponsibleId        String?
}

model BankAccount {
  id                 String            @id @default(uuid())
  bankName           String
  agencyNumber       String
  accountNumber      String
  accountType        AccountType
  familyMember_id    String?
  familyMember       FamilyMember?     @relation(fields: [familyMember_id], references: [id])
  candidate_id       String?
  candidate          Candidate?        @relation(fields: [candidate_id], references: [id])
  LegalResponsible   LegalResponsible? @relation(fields: [legalResponsibleId], references: [id])
  legalResponsibleId String?
}

model Expense {
  id                       String            @id @default(uuid())
  date                     DateTime          @default(now())
  waterSewage              Float?
  electricity              Float?
  landlinePhone            Float?
  mobilePhone              Float?
  food                     Float?
  rent                     Float?
  garageRent               Float?
  condominium              Float?
  cableTV                  Float?
  streamingServices        Float?
  fuel                     Float?
  annualIPVA               Float?
  annualIPTU               Float?
  annualITR                Float?
  annualIR                 Float?
  INSS                     Float?
  publicTransport          Float?
  schoolTransport          Float?
  internet                 Float?
  courses                  Float?
  healthPlan               Float?
  dentalPlan               Float?
  medicationExpenses       Float?
  totalExpense             Float?
  candidate_id             String?
  installmentCountIPTU     Int?
  installmentCountIPVA     Int?
  installmentCountIR       Int?
  installmentCountITR      Int?
  installmentValueIPTU     Float?
  installmentValueIPVA     Float?
  installmentValueIR       Float?
  installmentValueITR      Float?
  financing                Float?
  creditCard               Float?
  optedForInstallmentIPTU  Boolean?
  optedForInstallmentIPVA  Boolean?
  optedForInstallmentIR    Boolean?
  optedForInstallmentITR   Boolean?
  otherExpensesDescription String[]
  otherExpensesValue       Float[]
  candidate                Candidate?        @relation(fields: [candidate_id], references: [id])
  LegalResponsible         LegalResponsible? @relation(fields: [legalResponsibleId], references: [id])
  legalResponsibleId       String?
}

model Loan {
  id                 String            @id @default(uuid())
  familyMemberName   String
  installmentValue   Float
  totalInstallments  Int
  paidInstallments   Int
  bankName           String
  familyMember_id    String?
  candidate_id       String?
  candidate          Candidate?        @relation(fields: [candidate_id], references: [id])
  familyMember       FamilyMember?     @relation(fields: [familyMember_id], references: [id])
  LegalResponsible   LegalResponsible? @relation(fields: [legalResponsibleId], references: [id])
  legalResponsibleId String?
}

model Financing {
  id                 String            @id @default(uuid())
  familyMemberName   String
  installmentValue   Float
  totalInstallments  Int
  paidInstallments   Int
  bankName           String
  familyMember_id    String?
  candidate_id       String?
  otherFinancing     String?
  financingType      FinancingType
  candidate          Candidate?        @relation(fields: [candidate_id], references: [id])
  familyMember       FamilyMember?     @relation(fields: [familyMember_id], references: [id])
  LegalResponsible   LegalResponsible? @relation(fields: [legalResponsibleId], references: [id])
  legalResponsibleId String?
}

model CreditCard {
  id                 String            @id @default(uuid())
  familyMemberName   String
  usersCount         Int
  cardType           String
  bankName           String
  cardFlag           String
  invoiceValue       Float
  familyMember_id    String?
  candidate_id       String?
  candidate          Candidate?        @relation(fields: [candidate_id], references: [id])
  familyMember       FamilyMember?     @relation(fields: [familyMember_id], references: [id])
  LegalResponsible   LegalResponsible? @relation(fields: [legalResponsibleId], references: [id])
  legalResponsibleId String?
}

model OtherExpense {
  id                 String            @id @default(uuid())
  description        String
  value              Float
  familyMember_id    String?
  candidate_id       String?
  candidate          Candidate?        @relation(fields: [candidate_id], references: [id])
  familyMember       FamilyMember?     @relation(fields: [familyMember_id], references: [id])
  LegalResponsible   LegalResponsible? @relation(fields: [legalResponsibleId], references: [id])
  legalResponsibleId String?
}

model FamilyMemberDisease {
  id                 String            @id @default(uuid())
  disease            Disease?
  diseases           Disease[]
  specificDisease    String?
  hasMedicalReport   Boolean
  familyMember_id    String?
  familyMember       FamilyMember?     @relation(fields: [familyMember_id], references: [id], onDelete: Cascade)
  candidate          Candidate?        @relation(fields: [candidate_id], references: [id], onDelete: Cascade)
  candidate_id       String?
  legalResponsible   LegalResponsible? @relation(fields: [legalResponsibleId], references: [id], onDelete: Cascade)
  legalResponsibleId String?
  medications        Medication[]

  @@map("familyMemberDiseases")
}

model Medication {
  id                         String               @id @default(uuid())
  medicationName             String
  obtainedPublicly           Boolean
  specificMedicationPublicly String?
  familyMember_id            String?
  familyMember               FamilyMember?        @relation(fields: [familyMember_id], references: [id], onDelete: Cascade)
  candidate                  Candidate?           @relation(fields: [candidate_id], references: [id], onDelete: Cascade)
  candidate_id               String?
  legalResponsible           LegalResponsible?    @relation(fields: [legalResponsibleId], references: [id], onDelete: Cascade)
  legalResponsibleId         String?
  FamilyMemberDisease        FamilyMemberDisease? @relation(fields: [familyMemberDiseaseId], references: [id], onDelete: Cascade)
  familyMemberDiseaseId      String?

  @@map("medications")
}

model Declarations {
  id                 String            @id @default(uuid())
  declarationType    Declaration_Type
  declarationExists  Boolean           @default(true)
  text               String?
  familyMember_id    String?
  candidate_id       String?
  candidate          Candidate?        @relation(fields: [candidate_id], references: [id], onDelete: Cascade)
  familyMember       FamilyMember?     @relation(fields: [familyMember_id], references: [id], onDelete: Cascade)
  LegalResponsible   LegalResponsible? @relation(fields: [legalResponsibleId], references: [id], onDelete: Cascade)
  legalResponsibleId String?
}

model FinishedRegistration {
  id                 String            @id @default(uuid())
  cadastrante        Boolean           @default(false)
  grupoFamiliar      Boolean           @default(false)
  moradia            Boolean           @default(false)
  veiculos           Boolean           @default(false)
  rendaMensal        Boolean           @default(false)
  despesas           Boolean           @default(false)
  saude              Boolean           @default(false)
  declaracoes        Boolean           @default(false)
  documentos         Boolean           @default(false)
  candidate          Candidate?        @relation(fields: [candidate_id], references: [id])
  candidate_id       String?           @unique
  legalResponsible   LegalResponsible? @relation(fields: [legalResponsibleId], references: [id])
  legalResponsibleId String?           @unique

  @@map("registration")
}

model AnnouncementInterview {
  startDate       DateTime     @db.Date
  endDate         DateTime     @db.Date
  beginHour       DateTime     @db.Time(0)
  interval        Int          @default(5)
  endHour         DateTime     @db.Time(0)
  duration        Int          @default(20)
  announcement    Announcement @relation(fields: [announcement_id], references: [id])
  announcement_id String       @unique
}

model Announcement {
  id                   String                   @id @default(uuid())
  entityChanged        Boolean?
  branchChanged        Boolean?
  announcementType     AnnouncementType
  announcementNumber   String?
  announcementDate     DateTime?
  announcementBegin    DateTime?                @default(now())
  openDate             DateTime?
  closeDate            DateTime?
  waitingList          Boolean?                 @default(false)
  offeredVacancies     Int?
  verifiedScholarships Int                      @default(0)
  description          String?
  entity_id            String
  announcementName     String?
  announcementLogo     String?
  type2                String?
  sorted               Boolean?                 @default(false)
  interview            AnnouncementInterview?
  criteria             TiebreakerCriterias[]    @default([CadUnico, LeastFamilyIncome, SeriousIllness, Draw, Distance])
  types1               scholarshipGrantedType[]
  entity               Entity                   @relation(fields: [entity_id], references: [id])
  entity_subsidiary    EntitySubsidiary[]
  Application          Application[]
  educationLevels      EducationLevel[]
  ScholarshipGranted   ScholarshipGranted[]
  timelines            Timeline[]
  socialAssistant      SocialAssistant[]        @relation("AnnouncementToSocialAssistant")
  AnnouncementsSeen    AnnouncementsSeen[]
  InterviewSchedule    InterviewSchedule[]
  AssistantSchedule    AssistantSchedule[]
}

model InterviewSchedule {
  id                            String          @id @default(uuid())
  date                          DateTime
  accepted                      Boolean?
  rejectReason                  String?
  rejectComentary               String?
  InterviewRealized             Boolean?
  InterviewComentary            String?
  InterviewNotRealizedReason    String?
  InterviewNotRealizedComentary String?
  interviewLink                 String?
  interviewType                 InterviewType?
  announcement                  Announcement    @relation(fields: [announcement_id], references: [id])
  announcement_id               String
  assistant                     SocialAssistant @relation(fields: [assistant_id], references: [id])
  assistant_id                  String
  application                   Application?    @relation(fields: [application_id], references: [id])
  application_id                String?
}

model AssistantSchedule {
  id              String          @id @default(uuid())
  startDate       DateTime        @db.Date
  endDate         DateTime        @db.Date
  beginHour       DateTime        @db.Time(0)
  interval        Int             @default(5)
  endHour         DateTime        @db.Time(0)
  duration        Int             @default(20)
  announcement    Announcement    @relation(fields: [announcement_id], references: [id])
  announcement_id String
  assistant       SocialAssistant @relation(fields: [assistant_id], references: [id])
  assistant_id    String
}

model AnnouncementsSeen {
  id              String            @id @default(uuid())
  announcement    Announcement      @relation(fields: [announcement_id], references: [id])
  announcement_id String
  candidate_id    String?
  candidate       Candidate?        @relation(fields: [candidate_id], references: [id])
  responsible_id  String?
  responsible     LegalResponsible? @relation(fields: [responsible_id], references: [id])

  @@map("announcementsSeen")
}

model Timeline {
  id             String       @id @default(uuid())
  controlLine    Int
  stage          String
  deadline       DateTime
  announcementId String
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
}

model EducationLevel {
  id                       String                          @id @default(uuid())
  level                    LevelType
  basicEduType             BasicEducationType?
  scholarshipType          ScholarshipOfferType?
  higherEduScholarshipType HigherEducationScholarshipType?
  offeredCourseType        OfferedCourseType?
  availableCourses         String?
  offeredVacancies         Int?
  verifiedScholarships     Int?
  shift                    SHIFT?
  semester                 Int?
  grade                    String?
  announcementId           String
  Application              Application[]
  announcement             Announcement                    @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  entitySubsidiary         EntitySubsidiary?               @relation(fields: [entitySubsidiaryId], references: [id])
  entitySubsidiaryId       String?
}

model Application {
  id                   String               @id @default(uuid())
  candidate_id         String
  announcement_id      String
  status               ApplicationStatus
  socialAssistant_id   String?
  educationLevel_id    String
  candidateName        String?
  SocialAssistantName  String?
  CadUnico             Boolean?
  hasSevereDesease     Boolean?
  averageIncome        Float?
  perCapita            Float?
  position             Int?
  distance             Float                @default(100)
  CPFCNPJ              Boolean?
  InformedCNPJ         Boolean?
  ScholarshipPartial   Boolean?
  number               Int                  @default(1)
  parecerDocumentKey   String?              @unique
  parecerAditionalInfo String?
  createdAt            DateTime             @default(now())
  announcement         Announcement         @relation(fields: [announcement_id], references: [id], onDelete: Cascade)
  candidate            Candidate            @relation(fields: [candidate_id], references: [id], onDelete: Cascade)
  EducationLevel       EducationLevel       @relation(fields: [educationLevel_id], references: [id])
  SocialAssistant      SocialAssistant?     @relation(fields: [socialAssistant_id], references: [id])
  applicationHistories ApplicationHistory[]
  requests             Requests[]
  ScholarshipGranted   ScholarshipGranted?
  responsible_id       String?
  responsible          LegalResponsible?    @relation(fields: [responsible_id], references: [id])
  InterviewSchedule    InterviewSchedule[]

  @@unique([candidate_id, announcement_id])
}

model Requests {
  id             String           @id @default(uuid())
  application_id String
  application    Application      @relation(fields: [application_id], references: [id], onDelete: Cascade)
  answered       Boolean          @default(false)
  type           SolicitationType
  description    String
  deadLine       DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
}

model ApplicationHistory {
  id             String           @id @default(uuid())
  application_id String
  description    String
  report         String?
  createdAt      DateTime         @default(now())
  createdBy      HistoryRequester @default(System)
  application    Application      @relation(fields: [application_id], references: [id], onDelete: Cascade)
}

model ScholarshipGranted {
  id              String                   @id @default(uuid())
  gaveUp          Boolean
  ScholarshipCode String?
  types           scholarshipGrantedType[]
  application_id  String                   @unique
  announcement_id String
  announmentent   Announcement             @relation(fields: [announcement_id], references: [id])
  application     Application              @relation(fields: [application_id], references: [id])
}

model FamilyMemberToVehicle {
  A             String
  B             String
  familyMembers FamilyMember @relation(fields: [A], references: [id], onDelete: Cascade)
  Vehicle       Vehicle      @relation(fields: [B], references: [id], onDelete: Cascade)

  @@unique([A, B], map: "_FamilyMemberToVehicle_AB_unique")
  @@index([B], map: "_FamilyMemberToVehicle_B_index")
  @@map("_FamilyMemberToVehicle")
}

model DeletedFamilyMembers {
  id                       String @id @default(uuid())
  familyMember_id          String @unique
  candidateOrResponsibleId String
}

enum ROLE {
  ADMIN
  CANDIDATE
  RESPONSIBLE
  ENTITY
  ASSISTANT
  ENTITY_SUB
  ENTITY_DIRECTOR
  SELECTION_RESPONSIBLE
}

enum COUNTRY {
  AC
  AL
  AM
  AP
  BA
  CE
  DF
  ES
  GO
  MA
  MG
  MS
  MT
  PA
  PB
  PE
  PI
  PR
  RJ
  RN
  RO
  RR
  RS
  SC
  SE
  SP
  TO
}

enum GENDER {
  MALE
  FEMALE
}

enum DOCUMENT_TYPE {
  DriversLicense
  FunctionalCard
  MilitaryID
  Foreignerapplication
  Passport
  WorkCard
}

enum MARITAL_STATUS {
  Single
  Married
  Separated
  Divorced
  Widowed
  StableUnion
}

enum SkinColor {
  Yellow
  White
  Indigenous
  Brown
  Black
  NotDeclared
}

enum RELIGION {
  Catholic
  Evangelical
  Spiritist
  Atheist
  Other
  NotDeclared
}

enum SCHOLARSHIP {
  Illiterate
  ElementarySchool
  HighSchool
  CollegeGraduate
  CollegeUndergraduate
  Postgraduate
  Masters
  Doctorate
  PostDoctorate
}

enum EDUCATION_TYPE {
  Alfabetizacao
  Ensino_Medio
  Ensino_Tecnico
  Ensino_Superior
}

enum SHIFT {
  Matutino
  Vespertino
  Noturno
  Integral
}

enum INSTITUTION_TYPE {
  Public
  Private
}

enum IncomeSource {
  PrivateEmployee
  PublicEmployee
  DomesticEmployee
  TemporaryRuralEmployee
  BusinessOwnerSimplifiedTax
  BusinessOwner
  IndividualEntrepreneur
  SelfEmployed
  Retired
  Pensioner
  Apprentice
  Volunteer
  RentalIncome
  Student
  InformalWorker
  Unemployed
  TemporaryDisabilityBenefit
  LiberalProfessional
  FinancialHelpFromOthers
  Alimony
  PrivatePension
}

enum Relationship {
  Wife
  Husband
  Father
  Mother
  Stepfather
  Stepmother
  Sibling
  Grandparent
  Child
  Other
}

enum VehicleType {
  SmallCarsAndUtilities
  TrucksAndMinibuses
  Motorcycles
}

enum VehicleSituation {
  PaidOff
  Financed
}

enum VehicleUsage {
  WorkInstrument
  NecessaryDisplacement
}

enum PropertyStatus {
  OwnPaidOff
  OwnFinanced
  Rented
  ProvidedByEmployer
  ProvidedByFamily
  ProvidedOtherWay
  Irregular
}

enum ContractType {
  Verbal
  ThroughRealEstateAgency
  DirectWithOwner
}

enum TimeLivingInProperty {
  UpTo11Months
  From1To10Years
  From10To20Years
  Over20Years
}

enum DomicileType {
  House
  CondominiumHouse
  Apartment
  RoomingHouse
}

enum NumberOfRooms {
  One
  Two
  Three
  Four
  Five
  Six
  Seven
  Eight
  Nine
  Ten
  Eleven
  Twelve
}

enum Disease {
  ALIENATION_MENTAL
  CARDIOPATHY_SEVERE
  BLINDNESS
  RADIATION_CONTAMINATION
  PARKINSONS_DISEASE
  ANKYLOSING_SPONDYLITIS
  PAGETS_DISEASE
  HANSENS_DISEASE
  SEVERE_HEPATOPATHY
  SEVERE_NEPHROPATHY
  PARALYSIS
  ACTIVE_TUBERCULOSIS
  HIV_AIDS
  MALIGNANT_NEOPLASM
  TERMINAL_STAGE
  MICROCEPHALY
  AUTISM_SPECTRUM_DISORDER
  RARE_DISEASE
  OTHER_HIGH_COST_DISEASE
}

enum ScholarshipType {
  integralScholarchip
  halfScholarchip
}

enum EmploymentType {
  PrivateEmployee
  PublicEmployee
  DomesticEmployee
  TemporaryRuralEmployee
  BusinessOwnerSimplifiedTax
  BusinessOwner
  IndividualEntrepreneur
  SelfEmployed
  Retired
  Pensioner
  Apprentice
  Volunteer
  RentalIncome
  Student
  InformalWorker
  Unemployed
  TemporaryDisabilityBenefit
  LiberalProfessional
  FinancialHelpFromOthers
  Alimony
  PrivatePension
}

enum FinancingType {
  Car
  Motorcycle
  Truck
  House_Apartment_Land
  Other
}

enum AnnouncementType {
  ScholarshipGrant
  PeriodicVerification
}

enum LevelType {
  BasicEducation
  HigherEducation
}

enum BasicEducationType {
  Preschool
  Elementary
  HighSchool
  ProfessionalEducation
}

enum ScholarshipOfferType {
  Law187ScholarshipPartial
  Law187Scholarship
  StudentWithDisabilityPartial
  StudentWithDisability
  FullTimePartial
  FullTime
  EntityWorkersPartial
  EntityWorkers
}

enum HigherEducationScholarshipType {
  PROUNIFull
  PROUNIPartial
  StateGovernment
  StateGovernmentPartial
  CityGovernment
  CityGovernmentPartial
  ExternalEntities
  ExternalEntitiesPartial
  HigherEduInstitutionFull
  HigherEduInstitutionPartial
  HigherEduInstitutionWorkers
  HigherEduInstitutionWorkersPartial
  PostgraduateStrictoSensu
  PostgraduateStrictoSensuPartial
}

enum OfferedCourseType {
  UndergraduateBachelor
  UndergraduateLicense
  UndergraduateTechnologist
  Postgraduate
}

enum ApplicationStatus {
  Approved
  Rejected
  Pending
  WaitingList
  NotAnalysed
}

enum SolicitationType {
  Document
  Interview
  Visit
}

enum InterviewType {
  Interview
  Visit
}

enum scholarshipGrantedType {
  UNIFORM
  TRANSPORT
  FOOD
  HOUSING
  STUDY_MATERIAL
}

enum AccountType {
  CHECKING_ACCOUNT
  SAVINGS_ACCOUNT
  PAYMENT_ACCOUNT
  SALARY_ACCOUNT
  STUDENT_ACCOUNT
  DIGITAL_ACCOUNT
  MINORS_ACCOUNT
  BUSINESS_ACCOUNT
  JOINT_ACCOUNT
}

enum Declaration_Type {
  Form
  Activity
  AddressProof
  Autonomo
  Card
  ChildPension
  ChildSupport
  ContributionStatement
  Data
  Empresario
  InactiveCompany
  IncomeTaxExemption
  MEI
  NoAddressProof
  Penseion
  Pension
  Rent
  RentDetails
  RentIncome
  RentedHouse
  RuralWorker
  SingleStatus
  StableUnion
  Status
  WorkCard
}

enum HistoryRequester {
  Candidate
  Assistant
  System
}
